{"version":3,"file":"static/js/415.209f9a0a.chunk.js","mappings":"gMAEMA,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,EAAAA,CAyDJ,OAzDIA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAQJ,+FACQC,EAAU,CACdC,OAAQ,MACRC,IAAI,GAAD,OAAKH,EAAKI,UAAV,OAAqBJ,EAAKK,cAC7BC,OAAQ,CAAEC,SAAU,SACpBC,QAAS,CACPC,OAAQ,mBACRC,cAAeV,EAAKW,UAP1B,kBAY2BC,EAAAA,EAAAA,QAAcX,GAZzC,cAYUY,EAZV,OAccC,EACND,EADFE,KAAQD,QAdd,kBAgBWA,GAhBX,gCAkBIE,QAAQC,IAAI,KAAMC,SAlBtB,2GARIlB,IAQJ,4DAsBA,WAAkBmB,GAAlB,kFACQlB,EAAU,CACdC,OAAQ,MACRC,IAAI,GAAD,OAAKH,EAAKI,UAAV,OAAqBJ,EAAKoB,WAC7Bd,OAAQ,CACNe,cAAe,QACfd,SAAU,QACVe,KAAM,IACNH,MAAOA,GAETX,QAAS,CACPC,OAAQ,mBACRC,cAAeV,EAAKW,UAZ1B,kBAiB2BC,EAAAA,EAAAA,QAAcX,GAjBzC,cAiBUY,EAjBV,OAmBcC,EACND,EADFE,KAAQD,QAnBd,kBAqBWA,GArBX,gCAuBIE,QAAQC,IAAI,KAAMC,SAvBtB,4GAtBA,IAsBA,iEA2BA,WAAuBK,GAAvB,oGAA2BC,EAA3B,+BAAkC,GAC1BvB,EAAU,CACdC,OAAQ,MACRC,IAAI,GAAD,OAAKH,EAAKI,UAAV,OAAqBJ,EAAKyB,WAA1B,OAAsCF,GAAtC,OAA2CC,GAC9ClB,OAAQ,CAAEC,SAAU,SACpBC,QAAS,CACPC,OAAQ,mBACRC,cAAeV,EAAKW,UAP1B,kBAY2BC,EAAAA,EAAAA,QAAcX,GAZzC,UAYUY,EAZV,OAciB,aAATW,EAdR,uBAesBV,EAAcD,EAAtBE,KAAQD,QAftB,kBAgBaA,GAhBb,UAmBiB,aAATU,EAnBR,wBAoBqBE,EAAUb,EAAjBE,KAAOW,KApBrB,kBAqBaA,GArBb,eAwBYX,EAASF,EAATE,KAxBZ,kBAyBWA,GAzBX,kCA4BIC,QAAQC,IAAI,KAAMC,SA5BtB,6GA3BA,MA2BA,EAzDIlB,GAAAA,EACGI,SAAW,gCADdJ,EAEGK,aAAe,mBAFlBL,EAGGoB,UAAY,eAHfpB,EAIGyB,UAAY,SAJfzB,EAKGW,QACL,6NAoFJ,K,oDCtEA,IApB2B,SAAC,GAAgB,IAAdgB,EAAa,EAAbA,OACtBC,GAAWC,EAAAA,EAAAA,MAEjB,OADAb,QAAQC,IAAIW,IAEV,0BACE,wBACGD,EAAOG,KAAI,YAA0B,IAAvBP,EAAsB,EAAtBA,GAAIQ,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACxB,OACE,yBACE,SAAC,KAAD,CAASC,GAA0B,MAAtBL,EAASM,SAAT,iBAAsCX,GAAtC,UAAgDA,GAAMY,MAAO,CAAEC,KAAMR,GAAlF,SACGG,GAAgBC,KAFZT,EAMZ,OAIR,C,yGChBKc,EAAO,IAAIrC,EAAAA,EA0BjB,UAxBa,WACX,OAA4CsC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAI,mCAAG,6GAEYL,EAAKM,oBAFjB,OAEHC,EAFG,OAGT5B,QAAQC,IAAI2B,GACZJ,EAAkBI,GAJT,gDAMT5B,QAAQC,IAAI,KAAMC,SANT,yDAAH,qDASVwB,GACD,GAAE,KAGD,iCACE,4CACA,SAAC,IAAD,CAAoBf,OAAQY,MAGjC,C","sources":["Api/tmdb.js","components/TrendingMoviesList/TrendingMoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass Tmdb {\n  static BASE_URL = 'https://api.themoviedb.org/3/';\n  static TRENDING_URL = 'trending/all/day';\n  static SERCH_URL = 'search/movie';\n  static MOVIE_URL = 'movie/';\n  static API_KEY =\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmMWFlMGIwOGY4YjY2YjlkYWJjZDU1NmVjN2Q1ZTZkNiIsInN1YiI6IjY0NzI0ZDQwZGQ3MzFiMDBkZGYwODY0YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.LLt7atViSK39cLvgtemeZh3Xs2f2mDqebGQgM6iwFHY';\n\n  async getTrendingMovies() {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.TRENDING_URL}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n      const {\n        data: { results },\n      } = responce;\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async serchMovies(query) {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.SERCH_URL}`,\n      params: {\n        include_adult: 'false',\n        language: 'en-US',\n        page: '1',\n        query: query,\n      },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n      const {\n        data: { results },\n      } = responce;\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async getDetailsMovies(id, info = '') {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.MOVIE_URL}${id}${info}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n\n      if (info === '/reviews') {\n        const { data: { results } } = responce;\n        return results;\n      }\n\n      if (info === '/credits') {\n        const { data: {cast} } = responce;\n        return cast;\n      }\n\n      const { data } = responce;\n      return data;\n\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n}\n\nexport default Tmdb;\n","import { NavLink, useLocation } from \"react-router-dom\";\n\nconst TrendingMoviesList = ({ movies }) => {\n  const location = useLocation();\n  console.log(location);\n  return (\n    <div>\n      <ul>\n        {movies.map(({ id, title, name }) => {\n          return (\n            <li key={id}>\n              <NavLink to={location.pathname === '/' ? `movies/${id}` : `${id}`} state={{ from: location }}>\n                {title ? title : name}\n              </NavLink>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default TrendingMoviesList;","import { useEffect, useState } from \"react\";\nimport Tmdb from \"Api/tmdb\";\nimport TrendingMoviesList from \"components/TrendingMoviesList/TrendingMoviesList\";\n\nconst tmdb = new Tmdb();\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const result = await tmdb.getTrendingMovies();\n        console.log(result);\n        setTrendingMovies(result);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    load();\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      <TrendingMoviesList movies={trendingMovies} />\n    </>\n  )\n}\n\nexport default Home;"],"names":["Tmdb","options","method","url","BASE_URL","TRENDING_URL","params","language","headers","accept","Authorization","API_KEY","axios","responce","results","data","console","log","message","query","SERCH_URL","include_adult","page","id","info","MOVIE_URL","cast","movies","location","useLocation","map","title","name","to","pathname","state","from","tmdb","useState","trendingMovies","setTrendingMovies","useEffect","load","getTrendingMovies","result"],"sourceRoot":""}