{"version":3,"file":"static/js/959.0016bb45.chunk.js","mappings":"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","sources":["Api/tmdb.js","webpack://react-homework-template/./src/components/MovieInfo/MovieInfo.module.css?df02","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass Tmdb {\n  static BASE_URL = 'https://api.themoviedb.org/3/';\n  static TRENDING_URL = 'trending/all/day';\n  static SERCH_URL = 'search/movie';\n  static MOVIE_URL = 'movie/';\n  static API_KEY =\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmMWFlMGIwOGY4YjY2YjlkYWJjZDU1NmVjN2Q1ZTZkNiIsInN1YiI6IjY0NzI0ZDQwZGQ3MzFiMDBkZGYwODY0YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.LLt7atViSK39cLvgtemeZh3Xs2f2mDqebGQgM6iwFHY';\n\n  async getTrendingMovies() {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.TRENDING_URL}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n      const {\n        data: { results },\n      } = responce;\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async serchMovies(query) {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.SERCH_URL}`,\n      params: {\n        include_adult: 'false',\n        language: 'en-US',\n        page: '1',\n        query: query,\n      },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n      const {\n        data: { results },\n      } = responce;\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async getDetailsMovies(id, info = '') {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.MOVIE_URL}${id}${info}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n\n      if (info === '/reviews') {\n        const { data: { results } } = responce;\n        return results;\n      }\n\n      if (info === '/credits') {\n        const { data: {cast} } = responce;\n        return cast;\n      }\n\n      const { data } = responce;\n      return data;\n\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n}\n\nexport default Tmdb;\n","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MovieInfo_img__fx+Ux\"};","import noPhoto from '../../assets/istockphoto-1354776450-612x612.jpg';\nimport styles from './MovieInfo.module.css';\n\nconst MovieInfo = ({ movie }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } = movie\n\n  const year = new Date(release_date).getFullYear();\n  const poster = poster_path ? `https://image.tmdb.org/t/p/w185/${poster_path}` : noPhoto;\n  const userScore = Math.floor(vote_average * 10);\n\n  return (\n    <section>\n      <div>\n        <img\n          className={styles.img}\n          src={poster}\n          alt={title}\n          width={185}\n          height={278}\n        />\n      </div>\n      <div>\n        <h2>{title} ({year})</h2>\n        <p>{userScore}%</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <div>\n          {genres.map(({id, name}) => (<span key={id}>{name}</span>))}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default MovieInfo;","import { useEffect, useState, useRef, Suspense } from 'react';\nimport { useParams, NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Tmdb from 'Api/tmdb';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\n\nconst tmdb = new Tmdb();\n\nconst MovieDetails = () => {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState({});\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const result = await tmdb.getDetailsMovies(moviesId);\n\n        if (!result) {\n          toast.info('Movie not found');\n          return;\n        }\n\n        setMovie(result);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    load();\n  }, [moviesId]);\n\n  console.log(location);\n\n  return (\n    <>\n      <NavLink to={backLinkLocation.current}>back</NavLink>\n      {movie.id && <MovieInfo movie={movie} />}\n      <h3>Additional information</h3>\n      <ul>\n        <li>\n          <NavLink to=\"cast\" name=\"credits\">\n            Cast\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["Tmdb","options","method","url","BASE_URL","TRENDING_URL","params","language","headers","accept","Authorization","API_KEY","axios","responce","results","data","console","log","message","query","SERCH_URL","include_adult","page","id","info","MOVIE_URL","cast","movie","poster_path","title","release_date","vote_average","overview","genres","year","Date","getFullYear","poster","noPhoto","userScore","Math","floor","className","styles","src","alt","width","height","map","name","tmdb","moviesId","useParams","useState","setMovie","location","useLocation","backLinkLocation","useRef","state","from","useEffect","load","getDetailsMovies","result","toast","to","current","Suspense","fallback"],"sourceRoot":""}