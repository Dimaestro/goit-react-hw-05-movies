{"version":3,"file":"static/js/221.94ee5cf8.chunk.js","mappings":"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","sources":["Api/tmdb.js","components/CharactersList/CharactersList.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass Tmdb {\n  static BASE_URL = 'https://api.themoviedb.org/3/';\n  static TRENDING_URL = 'trending/all/day';\n  static SERCH_URL = 'search/movie';\n  static MOVIE_URL = 'movie/';\n  static API_KEY =\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmMWFlMGIwOGY4YjY2YjlkYWJjZDU1NmVjN2Q1ZTZkNiIsInN1YiI6IjY0NzI0ZDQwZGQ3MzFiMDBkZGYwODY0YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.LLt7atViSK39cLvgtemeZh3Xs2f2mDqebGQgM6iwFHY';\n\n  async getTrendingMovies() {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.TRENDING_URL}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n      const {\n        data: { results },\n      } = responce;\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async serchMovies(query) {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.SERCH_URL}`,\n      params: {\n        include_adult: 'false',\n        language: 'en-US',\n        page: '1',\n        query: query,\n      },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n      const {\n        data: { results },\n      } = responce;\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async getDetailsMovies(id, info = '') {\n    const options = {\n      method: 'GET',\n      url: `${Tmdb.BASE_URL}${Tmdb.MOVIE_URL}${id}${info}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n        Authorization: Tmdb.API_KEY,\n      },\n    };\n\n    try {\n      const responce = await axios.request(options);\n\n      if (info === '/reviews') {\n        const { data: { results } } = responce;\n        return results;\n      }\n\n      if (info === '/credits') {\n        const { data: {cast} } = responce;\n        return cast;\n      }\n\n      const { data } = responce;\n      return data;\n\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n}\n\nexport default Tmdb;\n","import noPhoto from '../../assets/istockphoto-1354776450-612x612.jpg';\n\nconst CharactersList = ({characters}) => {\n\n  return (\n    <div>\n      <ul>\n        {characters.map(({ id, character, name, profile_path }) => {\n          const poster = profile_path ? `https://image.tmdb.org/t/p/w185/${profile_path}` : noPhoto\n          return (\n            <li key={id}>\n              <img\n                src={poster}\n                alt={name}\n                width={185}\n                height={278} \n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default CharactersList\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport Tmdb from \"Api/tmdb\";\nimport CharactersList from \"components/CharactersList/CharactersList\";\n\nconst tmdb = new Tmdb();\n\nconst Cast = () => {\n  const {moviesId} = useParams();\n  const [credits, setCredits] = useState([]);\n  \n  useEffect(() => {\n    const load = async () => {\n      console.log(moviesId);\n      try {\n        const result = await tmdb.getDetailsMovies(moviesId, '/credits');\n\n        if (!result) {\n          toast.info('Movie not found');\n          return;\n        }\n\n        setCredits(result);\n\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    load();\n  }, [moviesId])\n\n  console.log(credits);\n\n  return (\n    <>\n      {credits.length !== 0 ? <CharactersList characters={credits}/> : <p>We don't have any credits'</p>}\n    </>\n  )\n}\n\nexport default Cast;"],"names":["Tmdb","options","method","url","BASE_URL","TRENDING_URL","params","language","headers","accept","Authorization","API_KEY","axios","responce","results","data","console","log","message","query","SERCH_URL","include_adult","page","id","info","MOVIE_URL","cast","characters","map","character","name","profile_path","poster","noPhoto","src","alt","width","height","tmdb","moviesId","useParams","useState","credits","setCredits","useEffect","load","getDetailsMovies","result","toast","length"],"sourceRoot":""}